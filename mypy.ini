[mypy]
# ==============================
# Configurações básicas
# ==============================

# Diretórios onde o mypy deve procurar por arquivos
# (por padrão, ele procura no diretório onde o comando é executado).
# Você pode especificar vários diretórios separados por vírgula.
# mypy_path = src, tests # exemplo
mypy_path = test_ify

# Reporte erros para todos os arquivos, mesmo aqueles sem type hints.
# (Se você tem algum arquivo legado sem type hints, essa opção ajuda a não ignorá-los)
check_untyped_defs = True

# Reportar erros quando o tipo de retorno de uma função não é explícito.
#no_implicit_optional = True

# Reportar erros em qualquer função que não tenha type hints.
# Se estiver adotando type hints aos poucos, pode ser interessante manter essa opção desativada no começo
# strict_optional = True # example

# ==============================
# Configurações de strictness
# ==============================

# Ativa todas as opções de verificação mais rigorosas do mypy.
# Isso inclui flags como no_implicit_any, disallow_untyped_calls,
# disallow_untyped_defs, etc.
# Use com cautela, pode gerar muitos erros no começo.
# strict = True  # exemplo
strict = True  


# Disallow uso de 'Any' implicito. Sempre que uma var não tiver tipo, será um erro
no_implicit_any = True

# Impede que o mypy aceite chamadas de função sem type hints (qualquer ou None).
disallow_untyped_calls = True

# Impede que o mypy aceite definições de funções sem type hints
disallow_untyped_defs = True


# Em funções que não explicitam o tipo de retorno, usar None como padrão
# Se você tem funções sem anotações de tipo e não deseja marcar erros, use False
# explicit_module_level_names = True # exemplo
explicit_module_level_names = True

# Reportar erros para códigos inacessíveis (por exemplo, depois de um return).
warn_unreachable = True

# Reportar erros quando tipos são comparados de forma não segura
warn_redundant_casts = True


# ==============================
# Configurações de comportamento
# ==============================

# Mypy deve ignorar erros em arquivos/módulos especificos (por exemplo, por ser bibliotecas externas)
# ignore_missing_imports = True # exemplo
# files =
#    some_file.py
#    another_module/*
#    another/diretorio/aqui/*.py

# Arquivos ou diretórios a serem ignorados
exclude =
    tests
    test_files

# Arquivos ou diretórios a serem ignorados com regex
# exclude = (
#     ".*test.py$" # arquivos terminando em test.py
#     ".*/diretorio_a_ignorar/.*" # qualquer subpasta dentro de diretorio_a_ignorar
# ) # exemplo

#  Habilitar cache em disco para checagens futuras
# cache_dir = .mypy_cache

#  Desabilitar cores na saída do mypy (útil para logs)
# color_output = False


# ==============================
# Configurações de plugins e extensões
# ==============================

# Plugins para uso com lib específicas
# plugins = mypy_django_plugin.main # exemplo
# plugins = numpy.typing # exemplo

# ==============================
# Configurações específicas para ambientes
# ==============================

# Permite ignorar tipos em testes (para evitar marcar muito código de teste como erro no inicio)
[mypy-tests.*]
#disallow_untyped_defs = False
#disallow_untyped_calls = False
#no_implicit_any = False